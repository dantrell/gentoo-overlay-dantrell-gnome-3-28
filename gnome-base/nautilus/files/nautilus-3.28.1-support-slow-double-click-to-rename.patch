diff '--exclude=.git' -urN a/data/org.gnome.nautilus.gschema.xml b/data/org.gnome.nautilus.gschema.xml
--- a/data/org.gnome.nautilus.gschema.xml	2018-04-09 16:02:06.000000000 -0400
+++ b/data/org.gnome.nautilus.gschema.xml	2018-04-24 05:12:39.867384898 -0400
@@ -121,6 +121,11 @@
       <summary>Type of click used to launch/open files</summary>
       <description>Possible values are “single” to launch files on a single click, or “double” to launch them on a double click.</description>
     </key>
+    <key name="slow-double-click-policy" type="b">
+      <default>false</default>
+      <summary>Type of click used to rename files</summary>
+      <description>If set to true, then Nautilus will have a feature allowing you to rename files on a slow double click.</description>
+    </key>
     <key name="executable-text-activation" enum="org.gnome.nautilus.ActivationChoice">
       <default>'display'</default>
       <summary>What to do with executable text files when activated</summary>
diff '--exclude=.git' -urN a/src/nautilus-canvas-container.c b/src/nautilus-canvas-container.c
--- a/src/nautilus-canvas-container.c	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-canvas-container.c	2018-04-24 17:09:33.794409808 -0400
@@ -166,6 +166,11 @@
 
 static void schedule_redo_layout (NautilusCanvasContainer *container);
 
+static gboolean
+handle_canvas_slow_double_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event);
+
 static const char *nautilus_canvas_container_accessible_action_names[] =
 {
     "activate",
@@ -3281,8 +3286,13 @@
     /* Invoke the canvas event handler and see if an item picks up the event. */
     clicked_on_icon = GTK_WIDGET_CLASS (nautilus_canvas_container_parent_class)->button_press_event (widget, event);
 
-    if (!gtk_widget_has_focus (widget))
-    {
+    NautilusFilesViewPrivate *priv;
+    priv = G_TYPE_INSTANCE_GET_PRIVATE (NAUTILUS_FILES_VIEW (get_canvas_view (container)),
+                                        NAUTILUS_TYPE_FILES_VIEW,
+                                        NautilusFilesViewPrivate);
+
+    if (!gtk_widget_has_focus (widget) &&
+        !gtk_widget_has_focus (priv->rename_file_controller)) {
         gtk_widget_grab_focus (widget);
     }
 
@@ -3441,6 +3451,20 @@
             }
         }
     }
+
+	if (details->drag_icon != NULL &&
+		handle_canvas_slow_double_click (container, details->drag_icon, event)) {
+		if (!details->skip_rename_on_release &&
+			(details->just_renamed == NULL || details->just_renamed != details->drag_icon))
+			nautilus_files_view_rename_file_popover_new (NAUTILUS_FILES_VIEW (get_canvas_view (container)),
+														 NAUTILUS_FILE (details->drag_icon->data));
+		/* Allow normal double click if just renamed */
+		if (details->just_renamed == details->drag_icon) {
+			details->just_renamed = NULL;
+		} else {
+			details->just_renamed = details->drag_icon;
+		}
+	}
 }
 
 static gboolean
@@ -3480,6 +3504,44 @@
     }
 }
 
+static gboolean
+clicked_within_slow_double_click_interval (NautilusCanvasContainer *container, NautilusCanvasIcon *icon, GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	details = container->details;
+
+	/* Determine click count (slow double click time is the 400ms default + 2s) */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (container))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < (double_click_time + 2000) * 1000) {
+		click_count = 1;
+	} else {
+		/* Allow normal double click if just renamed */
+		if (details->just_renamed == details->drag_icon) {
+			details->just_renamed = NULL;
+		}
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow slow double click */
+	if (click_count == 1 && icon == get_first_selected_icon (container)) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
 static void
 clear_drag_state (NautilusCanvasContainer *container)
 {
@@ -4234,6 +4296,9 @@
 
     container->details = details;
 
+	details->skip_rename_on_release = FALSE;
+	details->just_renamed = NULL;
+
     g_signal_connect (container, "focus-in-event",
                       G_CALLBACK (handle_focus_in_event), NULL);
     g_signal_connect (container, "focus-out-event",
@@ -4286,6 +4351,46 @@
     return FALSE;
 }
 
+static gboolean
+handle_canvas_slow_double_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+
+	NautilusFile *file = NAUTILUS_FILE (icon->data);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (event->button != DRAG_BUTTON) {
+		return FALSE;
+	}
+
+	details = container->details;
+
+	if (!details->slow_double_click_mode)
+		return FALSE;
+
+	GList *selection = nautilus_canvas_container_get_selection (container);
+	gint selected_count = g_list_length (selection);
+	g_list_free (selection);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	if (!details->single_click_mode &&
+		clicked_within_slow_double_click_interval (container, icon, event) &&
+		details->double_click_icon[0] == details->double_click_icon[1] &&
+		details->double_click_button[0] == details->double_click_button[1]) {
+		if (!button_event_modifies_selection (event)) {
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 /* NautilusCanvasIcon event handling.  */
 
 /* Conceptually, pressing button 1 together with CTRL or SHIFT toggles
@@ -4306,6 +4411,8 @@
 
     details = container->details;
 
+	details->skip_rename_on_release = FALSE;
+
     if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_3BUTTON_PRESS)
     {
         return TRUE;
@@ -4353,6 +4460,10 @@
      */
     details->icon_selected_on_button_down = icon->is_selected;
 
+	GList *icons = nautilus_canvas_container_get_selected_icons (container);
+	details->skip_rename_on_release = g_list_length (icons) > 1;
+	g_list_free (icons);
+
     if ((event->button == DRAG_BUTTON || event->button == MIDDLE_BUTTON) &&
         (event->state & GDK_SHIFT_MASK) != 0)
     {
@@ -5752,6 +5863,15 @@
     container->details->single_click_mode = single_click_mode;
 }
 
+void
+nautilus_canvas_container_set_slow_double_click_mode (NautilusCanvasContainer *container,
+													  gboolean slow_double_click_mode)
+{
+	g_return_if_fail (NAUTILUS_IS_CANVAS_CONTAINER (container));
+
+	container->details->slow_double_click_mode = slow_double_click_mode;
+}
+
 /* handle theme changes */
 
 void
diff '--exclude=.git' -urN a/src/nautilus-canvas-container.h b/src/nautilus-canvas-container.h
--- a/src/nautilus-canvas-container.h	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-canvas-container.h	2018-04-24 05:12:39.868384893 -0400
@@ -266,6 +266,8 @@
 									   int                     new_zoom_level);
 void              nautilus_canvas_container_set_single_click_mode         (NautilusCanvasContainer  *container,
 									   gboolean                single_click_mode);
+void              nautilus_canvas_container_set_slow_double_click_mode   (NautilusCanvasContainer  *container,
+									   gboolean                slow_double_click_mode);
 void              nautilus_canvas_container_enable_linger_selection       (NautilusCanvasContainer  *view,
 									   gboolean                enable);
 void              nautilus_canvas_container_reset_scroll_region           (NautilusCanvasContainer  *container);
diff '--exclude=.git' -urN a/src/nautilus-canvas-private.h b/src/nautilus-canvas-private.h
--- a/src/nautilus-canvas-private.h	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-canvas-private.h	2018-04-24 16:34:44.140131048 -0400
@@ -27,6 +27,8 @@
 #include "nautilus-canvas-item.h"
 #include "nautilus-canvas-container.h"
 #include "nautilus-canvas-dnd.h"
+#include "nautilus-canvas-view-container.h"
+#include "nautilus-files-view.h"
 
 /* An Icon. */
 
@@ -161,6 +163,9 @@
 	NautilusCanvasIcon *double_click_icon[2]; /* Both clicks in a double click need to be on the same icon */
 	guint double_click_button[2];
 
+	gboolean skip_rename_on_release;
+	NautilusCanvasIcon *just_renamed;
+
 	NautilusCanvasIcon *range_selection_base_icon;
 	
 	/* Idle ID. */
@@ -187,6 +192,7 @@
 
 	/* Mode settings. */
 	gboolean single_click_mode;
+	gboolean slow_double_click_mode;
 
         /* Set to TRUE after first allocation has been done */
 	gboolean has_been_allocated;
diff '--exclude=.git' -urN a/src/nautilus-canvas-view-container.c b/src/nautilus-canvas-view-container.c
--- a/src/nautilus-canvas-view-container.c	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-canvas-view-container.c	2018-04-24 05:12:39.868384893 -0400
@@ -34,7 +34,7 @@
 
 static GQuark attribute_none_q;
 
-static NautilusCanvasView *
+NautilusCanvasView *
 get_canvas_view (NautilusCanvasContainer *container)
 {
     /* Type unsafe comparison for performance */
diff '--exclude=.git' -urN a/src/nautilus-canvas-view-container.h b/src/nautilus-canvas-view-container.h
--- a/src/nautilus-canvas-view-container.h	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-canvas-view-container.h	2018-04-24 05:12:39.868384893 -0400
@@ -56,6 +56,8 @@
 	NautilusCanvasContainerClass parent_class;
 };
 
+NautilusCanvasView *
+get_canvas_view (NautilusCanvasContainer *container);
 GType                  nautilus_canvas_view_container_get_type         (void);
 NautilusCanvasContainer *nautilus_canvas_view_container_construct        (NautilusCanvasViewContainer *canvas_container,
 								      NautilusCanvasView      *view);
diff '--exclude=.git' -urN a/src/nautilus-canvas-view.c b/src/nautilus-canvas-view.c
--- a/src/nautilus-canvas-view.c	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-canvas-view.c	2018-04-24 16:35:21.050971066 -0400
@@ -178,6 +178,7 @@
                                                                         NautilusFile        *file,
                                                                         const SortCriterion *sort);
 static void                 nautilus_canvas_view_update_click_mode (NautilusCanvasView *canvas_view);
+static void                 nautilus_canvas_view_update_slow_double_click_mode (NautilusCanvasView *canvas_view);
 static void                 nautilus_canvas_view_reveal_selection (NautilusFilesView *view);
 static const SortCriterion *get_sort_criterion_by_metadata_text (const char *metadata_text,
                                                                  gboolean    reversed);
@@ -1248,6 +1249,14 @@
 }
 
 static void
+nautilus_canvas_view_slow_double_click_policy_changed (NautilusView *directory_view)
+{
+	g_assert (NAUTILUS_IS_CANVAS_VIEW (directory_view));
+
+	nautilus_canvas_view_update_slow_double_click_mode (NAUTILUS_CANVAS_VIEW (directory_view));
+}
+
+static void
 image_display_policy_changed_callback (gpointer callback_data)
 {
     NautilusCanvasView *canvas_view;
@@ -1299,6 +1308,21 @@
     nautilus_canvas_container_sort (get_canvas_container (canvas_view));
 }
 
+static void
+nautilus_canvas_view_update_slow_double_click_mode (NautilusCanvasView *canvas_view)
+{
+	NautilusCanvasContainer   *canvas_container;
+	gboolean slow_double_click_mode;
+
+	canvas_container = get_canvas_container (canvas_view);
+	g_assert (canvas_container != NULL);
+
+	slow_double_click_mode = g_settings_get_boolean (nautilus_preferences, NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
+
+	nautilus_canvas_container_set_slow_double_click_mode (canvas_container,
+														  slow_double_click_mode);
+}
+
 static gboolean
 canvas_view_can_accept_item (NautilusCanvasContainer *container,
                              NautilusFile            *target_item,
@@ -1425,6 +1449,7 @@
                        GTK_WIDGET (canvas_container));
 
     nautilus_canvas_view_update_click_mode (canvas_view);
+    nautilus_canvas_view_update_slow_double_click_mode (canvas_view);
     nautilus_canvas_container_set_zoom_level (canvas_container,
                                               get_default_zoom_level (canvas_view));
 
@@ -1592,6 +1617,7 @@
     nautilus_files_view_class->invert_selection = nautilus_canvas_view_invert_selection;
     nautilus_files_view_class->compare_files = compare_files;
     nautilus_files_view_class->click_policy_changed = nautilus_canvas_view_click_policy_changed;
+    nautilus_files_view_class->slow_double_click_policy_changed = nautilus_canvas_view_slow_double_click_policy_changed;
     nautilus_files_view_class->update_actions_state = nautilus_canvas_view_update_actions_state;
     nautilus_files_view_class->sort_directories_first_changed = nautilus_canvas_view_sort_directories_first_changed;
     nautilus_files_view_class->widget_to_file_operation_position = nautilus_canvas_view_widget_to_file_operation_position;
diff '--exclude=.git' -urN a/src/nautilus-files-view.c b/src/nautilus-files-view.c
--- a/src/nautilus-files-view.c	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-files-view.c	2018-04-24 16:49:20.382251275 -0400
@@ -41,8 +41,6 @@
 #include "nautilus-properties-window.h"
 #include "nautilus-window.h"
 #include "nautilus-toolbar.h"
-#include "nautilus-view.h"
-#include "nautilus-tag-manager.h"
 #include <gdk/gdkx.h>
 #include <gdk/gdkkeysyms.h>
 #include <gtk/gtk.h>
@@ -72,10 +70,6 @@
 #include "nautilus-file-operations.h"
 #include "nautilus-file-utilities.h"
 #include "nautilus-file-private.h"
-#include "nautilus-file-name-widget-controller.h"
-#include "nautilus-rename-file-popover-controller.h"
-#include "nautilus-new-folder-dialog-controller.h"
-#include "nautilus-compress-dialog-controller.h"
 #include "nautilus-global-preferences.h"
 #include "nautilus-link.h"
 #include "nautilus-metadata.h"
@@ -158,124 +152,6 @@
 
 typedef struct
 {
-    /* Main components */
-    GtkWidget *overlay;
-
-    NautilusWindowSlot *slot;
-    NautilusDirectory *model;
-    NautilusFile *directory_as_file;
-    GFile *location;
-    guint dir_merge_id;
-
-    NautilusQuery *search_query;
-
-    NautilusRenameFilePopoverController *rename_file_controller;
-    NautilusNewFolderDialogController *new_folder_controller;
-    NautilusCompressDialogController *compress_controller;
-
-    gboolean supports_zooming;
-
-    GList *scripts_directory_list;
-    GList *templates_directory_list;
-
-    guint display_selection_idle_id;
-    guint update_context_menus_timeout_id;
-    guint update_status_idle_id;
-    guint reveal_selection_idle_id;
-
-    guint display_pending_source_id;
-    guint changes_timeout_id;
-
-    guint update_interval;
-    guint64 last_queued;
-
-    guint files_added_handler_id;
-    guint files_changed_handler_id;
-    guint load_error_handler_id;
-    guint done_loading_handler_id;
-    guint file_changed_handler_id;
-
-    GList *new_added_files;
-    GList *new_changed_files;
-
-    GHashTable *non_ready_files;
-
-    GList *old_added_files;
-    GList *old_changed_files;
-
-    GList *pending_selection;
-    GHashTable *pending_reveal;
-
-    /* whether we are in the active slot */
-    gboolean active;
-
-    /* loading indicates whether this view has begun loading a directory.
-     * This flag should need not be set inside subclasses. NautilusFilesView automatically
-     * sets 'loading' to TRUE before it begins loading a directory's contents and to FALSE
-     * after it finishes loading the directory and its view.
-     */
-    gboolean loading;
-    gboolean templates_present;
-    gboolean scripts_present;
-
-    gboolean in_destruction;
-
-    gboolean sort_directories_first;
-
-    gboolean show_hidden_files;
-    gboolean ignore_hidden_file_preferences;
-
-    gboolean batching_selection_level;
-    gboolean selection_changed_while_batched;
-
-    gboolean selection_was_removed;
-
-    gboolean metadata_for_directory_as_file_pending;
-    gboolean metadata_for_files_in_directory_pending;
-
-    GList *subdirectory_list;
-
-    GMenu *selection_menu;
-    GMenu *background_menu;
-
-    GActionGroup *view_action_group;
-
-    GtkWidget *scrolled_window;
-
-    /* Empty states */
-    GtkWidget *folder_is_empty_widget;
-    GtkWidget *trash_is_empty_widget;
-    GtkWidget *no_search_results_widget;
-    GtkWidget *starred_is_empty_widget;
-
-    /* Floating bar */
-    guint floating_bar_set_status_timeout_id;
-    guint floating_bar_loading_timeout_id;
-    guint floating_bar_set_passthrough_timeout_id;
-    GtkWidget *floating_bar;
-
-    /* Toolbar menu */
-    NautilusToolbarMenuSections *toolbar_menu_sections;
-    GtkWidget *sort_menu;
-    GtkWidget *sort_trash_time;
-    GtkWidget *visible_columns;
-    GtkWidget *stop;
-    GtkWidget *reload;
-    GtkWidget *zoom_controls_box;
-    GtkWidget *zoom_level_label;
-
-    gulong stop_signal_handler;
-    gulong reload_signal_handler;
-
-    GCancellable *starred_cancellable;
-    NautilusTagManager *tag_manager;
-
-    gint name_accepted_handler_id;
-    gint cancelled_handler_id;
-} NautilusFilesViewPrivate;
-
-typedef struct
-{
     NautilusFile *file;
     NautilusDirectory *directory;
 } FileAndDirectory;
@@ -1948,7 +1824,7 @@
     disconnect_rename_controller_signals (view);
 }
 
-static void
+void
 nautilus_files_view_rename_file_popover_new (NautilusFilesView *view,
                                              NautilusFile      *target_file)
 {
@@ -2687,6 +2563,16 @@
     NAUTILUS_FILES_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->click_policy_changed (view);
 }
 
+static void
+slow_double_click_mode_changed_callback (gpointer callback_data)
+{
+        NautilusFilesView *view;
+
+        view = NAUTILUS_FILES_VIEW (callback_data);
+
+        NAUTILUS_FILES_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->slow_double_click_policy_changed (view);
+}
+
 gboolean
 nautilus_files_view_should_sort_directories_first (NautilusFilesView *view)
 {
@@ -3152,6 +3038,8 @@
                                           schedule_update_context_menus, view);
     g_signal_handlers_disconnect_by_func (nautilus_preferences,
                                           click_policy_changed_callback, view);
+    g_signal_handlers_disconnect_by_func (nautilus_preferences,
+                                          slow_double_click_mode_changed_callback, view);
     g_signal_handlers_disconnect_by_func (gtk_filechooser_preferences,
                                           sort_directories_first_changed_callback, view);
     g_signal_handlers_disconnect_by_func (gtk_filechooser_preferences,
@@ -9614,6 +9502,10 @@
                               "changed::" NAUTILUS_PREFERENCES_CLICK_POLICY,
                               G_CALLBACK (click_policy_changed_callback),
                               view);
+    g_signal_connect_swapped (nautilus_preferences,
+                              "changed::" NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY,
+                              G_CALLBACK(slow_double_click_mode_changed_callback),
+                              view);
     g_signal_connect_swapped (gtk_filechooser_preferences,
                               "changed::" NAUTILUS_PREFERENCES_SORT_DIRECTORIES_FIRST,
                               G_CALLBACK (sort_directories_first_changed_callback), view);
diff '--exclude=.git' -urN a/src/nautilus-files-view.h b/src/nautilus-files-view.h
--- a/src/nautilus-files-view.h	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-files-view.h	2018-04-24 16:49:50.350116299 -0400
@@ -42,6 +42,131 @@
 
 G_DECLARE_DERIVABLE_TYPE (NautilusFilesView, nautilus_files_view, NAUTILUS, FILES_VIEW, GtkGrid)
 
+#include "nautilus-tag-manager.h"
+
+#include "nautilus-file-name-widget-controller.h"
+#include "nautilus-rename-file-popover-controller.h"
+#include "nautilus-new-folder-dialog-controller.h"
+#include "nautilus-compress-dialog-controller.h"
+
+typedef struct
+{
+    /* Main components */
+    GtkWidget *overlay;
+
+    NautilusWindowSlot *slot;
+    NautilusDirectory *model;
+    NautilusFile *directory_as_file;
+    GFile *location;
+    guint dir_merge_id;
+
+    NautilusQuery *search_query;
+
+    NautilusRenameFilePopoverController *rename_file_controller;
+    NautilusNewFolderDialogController *new_folder_controller;
+    NautilusCompressDialogController *compress_controller;
+
+    gboolean supports_zooming;
+
+    GList *scripts_directory_list;
+    GList *templates_directory_list;
+
+    guint display_selection_idle_id;
+    guint update_context_menus_timeout_id;
+    guint update_status_idle_id;
+    guint reveal_selection_idle_id;
+
+    guint display_pending_source_id;
+    guint changes_timeout_id;
+
+    guint update_interval;
+    guint64 last_queued;
+
+    guint files_added_handler_id;
+    guint files_changed_handler_id;
+    guint load_error_handler_id;
+    guint done_loading_handler_id;
+    guint file_changed_handler_id;
+
+    GList *new_added_files;
+    GList *new_changed_files;
+
+    GHashTable *non_ready_files;
+
+    GList *old_added_files;
+    GList *old_changed_files;
+
+    GList *pending_selection;
+    GHashTable *pending_reveal;
+
+    /* whether we are in the active slot */
+    gboolean active;
+
+    /* loading indicates whether this view has begun loading a directory.
+     * This flag should need not be set inside subclasses. NautilusFilesView automatically
+     * sets 'loading' to TRUE before it begins loading a directory's contents and to FALSE
+     * after it finishes loading the directory and its view.
+     */
+    gboolean loading;
+    gboolean templates_present;
+    gboolean scripts_present;
+
+    gboolean in_destruction;
+
+    gboolean sort_directories_first;
+
+    gboolean show_hidden_files;
+    gboolean ignore_hidden_file_preferences;
+
+    gboolean batching_selection_level;
+    gboolean selection_changed_while_batched;
+
+    gboolean selection_was_removed;
+
+    gboolean metadata_for_directory_as_file_pending;
+    gboolean metadata_for_files_in_directory_pending;
+
+    GList *subdirectory_list;
+
+    GMenu *selection_menu;
+    GMenu *background_menu;
+
+    GActionGroup *view_action_group;
+
+    GtkWidget *scrolled_window;
+
+    /* Empty states */
+    GtkWidget *folder_is_empty_widget;
+    GtkWidget *trash_is_empty_widget;
+    GtkWidget *no_search_results_widget;
+    GtkWidget *starred_is_empty_widget;
+
+    /* Floating bar */
+    guint floating_bar_set_status_timeout_id;
+    guint floating_bar_loading_timeout_id;
+    guint floating_bar_set_passthrough_timeout_id;
+    GtkWidget *floating_bar;
+
+    /* Toolbar menu */
+    NautilusToolbarMenuSections *toolbar_menu_sections;
+    GtkWidget *sort_menu;
+    GtkWidget *sort_trash_time;
+    GtkWidget *visible_columns;
+    GtkWidget *stop;
+    GtkWidget *reload;
+    GtkWidget *zoom_controls_box;
+    GtkWidget *zoom_level_label;
+
+    gulong stop_signal_handler;
+    gulong reload_signal_handler;
+
+    GCancellable *starred_cancellable;
+    NautilusTagManager *tag_manager;
+
+    gint name_accepted_handler_id;
+    gint cancelled_handler_id;
+} NautilusFilesViewPrivate;
+
 struct _NautilusFilesViewClass {
         GtkGridClass parent_class;
 
@@ -215,6 +340,7 @@
          * values and forcing an update if appropriate.
          */
         void        (* click_policy_changed) (NautilusFilesView *view);
+        void        (* slow_double_click_policy_changed) (NautilusFilesView *view);
         void        (* sort_directories_first_changed) (NautilusFilesView *view);
 
         /* Get the id for this view. Its a guint*/
@@ -300,6 +426,8 @@
                                                                   const GList            *item_uris,
                                                                   const char             *target_uri,
                                                                   int                     copy_action);
+void              nautilus_files_view_rename_file_popover_new    (NautilusFilesView *view,
+                                                                  NautilusFile      *target_file);
 void              nautilus_files_view_new_file_with_initial_contents (NautilusFilesView  *view,
                                                                       const char         *parent_uri,
                                                                       const char         *filename,
diff '--exclude=.git' -urN a/src/nautilus-global-preferences.h b/src/nautilus-global-preferences.h
--- a/src/nautilus-global-preferences.h	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-global-preferences.h	2018-04-24 05:12:39.871384877 -0400
@@ -52,6 +52,9 @@
 /* Drag and drop preferences */
 #define NAUTILUS_PREFERENCES_OPEN_FOLDER_ON_DND_HOVER   	"open-folder-on-dnd-hover"
 
+/* Slow double click preference */
+#define NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY "slow-double-click-policy"
+
 /* Activating executable text files */
 #define NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION		"executable-text-activation"
 
diff '--exclude=.git' -urN a/src/nautilus-list-view-private.h b/src/nautilus-list-view-private.h
--- a/src/nautilus-list-view-private.h	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-list-view-private.h	2018-04-24 16:38:51.296052828 -0400
@@ -40,6 +40,9 @@
 
   GtkTreePath *double_click_path[2]; /* Both clicks in a double click need to be on the same row */
 
+  gboolean skip_rename_on_release;
+  NautilusFile *just_renamed;
+
   GtkTreePath *new_selection_path;   /* Path of the new selection after removing a file */
 
   GtkTreePath *hover_path;
@@ -68,6 +71,8 @@
 
   GRegex *regex;
 
+  gboolean slow_double_click_mode;
+
   NautilusTagManager *tag_manager;
   GCancellable *starred_cancellable;
 };
diff '--exclude=.git' -urN a/src/nautilus-list-view.c b/src/nautilus-list-view.c
--- a/src/nautilus-list-view.c	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-list-view.c	2018-04-24 17:27:00.135228653 -0400
@@ -34,6 +34,8 @@
 #include "nautilus-view.h"
 #include "nautilus-tag-manager.h"
 
+#include "nautilus-files-view.h"
+
 #include <string.h>
 #include <eel/eel-vfs-extensions.h>
 #include <eel/eel-glib-extensions.h>
@@ -95,6 +97,8 @@
                                         GdkEvent     *event,
                                         gpointer      user_data);
 
+static gboolean
+handle_icon_slow_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event);
 
 G_DEFINE_TYPE (NautilusListView, nautilus_list_view, NAUTILUS_TYPE_FILES_VIEW);
 
@@ -295,6 +299,24 @@
                 activate_selected_items_alternate (view, NULL, TRUE);
             }
         }
+
+		NautilusFile *file = nautilus_list_model_file_for_path (view->details->model, path);
+
+		if (handle_icon_slow_double_click (view, path, event)) {
+			if (!view->details->skip_rename_on_release &&
+				(view->details->just_renamed == NULL || view->details->just_renamed != file))
+				nautilus_files_view_rename_file_popover_new (NAUTILUS_FILES_VIEW (view),
+															 file);
+			/* Allow normal double click if just renamed */
+			if (view->details->just_renamed == file) {
+				view->details->just_renamed = NULL;
+			} else {
+				view->details->just_renamed = file;
+			}
+		}
+
+		nautilus_file_unref (file);
+
         gtk_tree_path_free (path);
     }
 }
@@ -498,6 +520,153 @@
 }
 
 static gboolean
+clicked_within_double_click_interval (NautilusListView *view)
+{
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	/* Determine click count */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < double_click_time * 1000) {
+		click_count++;
+	} else {
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow double click */
+	if (click_count == 1) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+clicked_within_slow_double_click_interval (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	/* Determine click count (slow double click time is the 400ms default + 2s) */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < (double_click_time + 2000) * 1000) {
+		click_count = 1;
+	} else {
+		NautilusFile *file = nautilus_list_model_file_for_path (view->details->model, path);
+
+		/* Allow normal double click if just renamed */
+		if (view->details->just_renamed == file) {
+			view->details->just_renamed = NULL;
+		}
+
+		nautilus_file_unref (file);
+
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (view->details->tree_view));
+
+	GList *selected = gtk_tree_selection_get_selected_rows (selection, NULL);
+	gint selected_count = g_list_length (selected);
+	g_list_free (selected);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	/* Only allow slow double click */
+	if (click_count == 1 &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+handle_icon_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event, gboolean on_expander)
+{
+	GtkWidgetClass *tree_view_class;
+	tree_view_class = GTK_WIDGET_GET_CLASS (view->details->tree_view);
+
+	/* Ignore double click if we are in single click mode */
+	if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE) {
+		return FALSE;
+	}
+
+	if (clicked_within_double_click_interval (view) && 
+		view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0 &&
+		!on_expander) {
+		/* NOTE: Activation can actually destroy the view if we're switching */
+		if (!button_event_modifies_selection (event)) {
+			if ((event->button == 1 || event->button == 3)) {
+				activate_selected_items (view);
+			} else if (event->button == 2) {
+				activate_selected_items_alternate (view, NULL, TRUE);
+			}
+
+			return TRUE;
+		} else if (event->button == 1 &&
+			   (event->state & GDK_SHIFT_MASK) != 0) {
+			NautilusFile *file;
+			file = nautilus_list_model_file_for_path (view->details->model, path);
+			if (file != NULL) {
+				activate_selected_items_alternate (view, file, TRUE);
+				nautilus_file_unref (file);
+			}
+
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
+handle_icon_slow_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	NautilusListViewDetails *details;
+	NautilusFile *file;
+
+	details = view->details;
+
+	if (!details->slow_double_click_mode)
+		return FALSE;
+
+	file = nautilus_list_model_file_for_path (view->details->model, path);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (clicked_within_slow_double_click_interval (view, path, event) && view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		if (!button_event_modifies_selection (event)) {
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
 button_press_callback (GtkWidget      *widget,
                        GdkEventButton *event,
                        gpointer        callback_data)
@@ -508,10 +677,6 @@
     GtkTreeViewColumn *column;
     GtkTreeSelection *selection;
     GtkWidgetClass *tree_view_class;
-    gint64 current_time;
-    static gint64 last_click_time = 0;
-    static int click_count = 0;
-    int double_click_time;
     gboolean call_parent, on_expander, show_expanders;
     gboolean is_simple_click, path_selected;
     NautilusFile *file;
@@ -524,12 +689,18 @@
     view->details->last_event_button_x = event->x;
     view->details->last_event_button_y = event->y;
 
+	view->details->skip_rename_on_release = FALSE;
+
     /* Don't handle extra mouse buttons here */
     if (event->button > 5)
     {
         return FALSE;
     }
 
+	if (event->type == GDK_2BUTTON_PRESS) {
+		return TRUE;
+	}
+
     if (event->window != gtk_tree_view_get_bin_window (tree_view))
     {
         return FALSE;
@@ -540,30 +711,6 @@
         tree_view,
         event->x, event->y);
 
-    g_object_get (G_OBJECT (gtk_widget_get_settings (widget)),
-                  "gtk-double-click-time", &double_click_time,
-                  NULL);
-
-    /* Determine click count */
-    current_time = g_get_monotonic_time ();
-    if (current_time - last_click_time < double_click_time * 1000)
-    {
-        click_count++;
-    }
-    else
-    {
-        click_count = 0;
-    }
-
-    /* Stash time for next compare */
-    last_click_time = current_time;
-
-    /* Ignore double click if we are in single click mode */
-    if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE && click_count >= 2)
-    {
-        return TRUE;
-    }
-
     view->details->ignore_button_release = FALSE;
     is_simple_click = ((event->button == GDK_BUTTON_PRIMARY || event->button == GDK_BUTTON_MIDDLE) && (event->type == GDK_BUTTON_PRESS));
 
@@ -636,48 +783,21 @@
                                                NULL,
                                                NULL));
 
-    if (is_simple_click && click_count <= 0 && on_star)
+    if (is_simple_click && on_star)
     {
             on_star_cell_renderer_clicked (path, view);
     }
-    else if (event->type == GDK_2BUTTON_PRESS && !on_star)
+    else if (handle_icon_double_click (view, path, event, on_expander) && !on_star)
     {
         /* Double clicking does not trigger a D&D action. */
         view->details->drag_button = 0;
-
-        /* NOTE: Activation can actually destroy the view if we're switching */
-        if (!on_expander &&
-            view->details->double_click_path[1] &&
-            gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0)
-        {
-            if ((event->button == GDK_BUTTON_PRIMARY) && button_event_modifies_selection (event))
-            {
-                file = nautilus_list_model_file_for_path (view->details->model, path);
-                if (file != NULL)
-                {
-                    activate_selected_items_alternate (view, file, TRUE);
-                    nautilus_file_unref (file);
-                }
-            }
-            else
-            {
-                if ((event->button == GDK_BUTTON_PRIMARY || event->button == GDK_BUTTON_SECONDARY))
-                {
-                    activate_selected_items (view);
-                }
-                else if (event->button == GDK_BUTTON_MIDDLE)
-                {
-                    activate_selected_items_alternate (view, NULL, TRUE);
-                }
-            }
-        }
-        else
-        {
-            tree_view_class->button_press_event (widget, event);
-        }
     }
     else
     {
+		GList *selected_rows = gtk_tree_selection_get_selected_rows (tree_view, NULL);
+		view->details->skip_rename_on_release = g_list_length (selected_rows) > 1;
+		g_list_free (selected_rows);
+
         /* We're going to filter out some situations where
          * we can't let the default code run because all
          * but one row would be would be deselected. We don't
@@ -3361,6 +3481,19 @@
 }
 
 static void
+nautilus_list_view_slow_double_click_policy_changed (NautilusFilesView *directory_view)
+{
+	NautilusListView *view;
+
+	g_assert (NAUTILUS_IS_LIST_VIEW (directory_view));
+
+	view = NAUTILUS_LIST_VIEW (directory_view);
+
+	view->details->slow_double_click_mode = g_settings_get_boolean (nautilus_preferences,
+															 NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
+}
+
+static void
 nautilus_list_view_click_policy_changed (NautilusFilesView *directory_view)
 {
     GdkWindow *win;
@@ -3837,6 +3970,7 @@
     nautilus_files_view_class->get_view_id = nautilus_list_view_get_id;
     nautilus_files_view_class->get_first_visible_file = nautilus_list_view_get_first_visible_file;
     nautilus_files_view_class->scroll_to_file = list_view_scroll_to_file;
+	nautilus_files_view_class->slow_double_click_policy_changed = nautilus_list_view_slow_double_click_policy_changed;
     nautilus_files_view_class->compute_rename_popover_pointing_to = nautilus_list_view_compute_rename_popover_pointing_to;
     nautilus_files_view_class->reveal_for_selection_context_menu = nautilus_list_view_reveal_for_selection_context_menu;
 }
@@ -3849,6 +3983,9 @@
 
     list_view->details = g_new0 (NautilusListViewDetails, 1);
 
+	list_view->details->skip_rename_on_release = FALSE;
+	list_view->details->just_renamed = NULL;
+
     /* ensure that the zoom level is always set before settings up the tree view columns */
     list_view->details->zoom_level = get_default_zoom_level ();
 
@@ -3880,6 +4017,7 @@
                       G_CALLBACK (on_clipboard_owner_changed), list_view);
 
     nautilus_list_view_click_policy_changed (NAUTILUS_FILES_VIEW (list_view));
+	nautilus_list_view_slow_double_click_policy_changed (NAUTILUS_FILES_VIEW (list_view));
 
     nautilus_list_view_set_zoom_level (list_view, get_default_zoom_level ());
 
diff '--exclude=.git' -urN a/src/nautilus-preferences-window.c b/src/nautilus-preferences-window.c
--- a/src/nautilus-preferences-window.c	2018-04-09 16:02:06.000000000 -0400
+++ b/src/nautilus-preferences-window.c	2018-04-24 16:40:16.964675616 -0400
@@ -61,11 +61,15 @@
     "trash_confirm_checkbutton"
 #define NAUTILUS_PREFERENCES_DIALOG_USE_NEW_VIEWS_WIDGET                    \
     "use_new_views_checkbutton"
+#define NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET                   \
+    "slow_double_click_checkbutton"
 
 /* int enums */
 #define NAUTILUS_PREFERENCES_DIALOG_THUMBNAIL_LIMIT_WIDGET                     \
     "preview_image_size_spinbutton"
 
+#define W(s) (gtk_builder_get_object (builder, s))
+
 static const char * const speed_tradeoff_values[] =
 {
     "local-only", "always", "never",
@@ -452,6 +456,29 @@
     }
 }
 
+/* disable slow-double-click-policy when click-policy is "single" */
+static void
+setup_slow_double_click_policy (GtkBuilder *builder)
+{
+	gboolean enabled = FALSE;
+	enabled = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (W (click_behavior_components[1])));
+	if(enabled==FALSE){
+		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(W (NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET)), FALSE);
+	}
+	gtk_widget_set_sensitive (GTK_WIDGET (W (NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET)), enabled);
+}
+
+static void
+connect_slow_double_click_policy (GtkBuilder *builder)
+{
+	GtkRadioButton *w;
+	w = GTK_RADIO_BUTTON(W(click_behavior_components[0]));
+ 		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_slow_double_click_policy), builder);
+
+	w = GTK_RADIO_BUTTON(W(click_behavior_components[1]));
+		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_slow_double_click_policy), builder);
+}
+
 static void nautilus_preferences_window_setup(GtkBuilder *builder,
                                               GtkWindow  *parent_window)
 {
@@ -480,6 +507,9 @@
     bind_builder_radio (
         builder, nautilus_preferences, (const char **) click_behavior_components,
         NAUTILUS_PREFERENCES_CLICK_POLICY, (const char **) click_behavior_values);
+    bind_builder_bool(builder, nautilus_preferences,
+                        NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET,
+                        NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
     bind_builder_radio (builder, nautilus_preferences,
                         (const char **) executable_text_components,
                         NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION,
@@ -501,6 +531,10 @@
                             NAUTILUS_PREFERENCES_DIALOG_THUMBNAIL_LIMIT_WIDGET,
                             NAUTILUS_PREFERENCES_FILE_THUMBNAIL_LIMIT);
 
+    /* disable slow-double-click-policy when click-policy is "single" */
+    setup_slow_double_click_policy (builder);
+    connect_slow_double_click_policy (builder);
+
     nautilus_preferences_window_setup_thumbnail_limit_formatting (builder);
     nautilus_preferences_window_setup_icon_caption_page (builder);
     nautilus_preferences_window_setup_list_column_page (builder);
diff '--exclude=.git' -urN a/src/resources/ui/nautilus-preferences-window.ui b/src/resources/ui/nautilus-preferences-window.ui
--- a/src/resources/ui/nautilus-preferences-window.ui	2018-04-09 16:02:06.000000000 -0400
+++ b/src/resources/ui/nautilus-preferences-window.ui	2018-04-24 05:12:39.872384873 -0400
@@ -647,6 +647,23 @@
                     <property name="position">3</property>
                   </packing>
                 </child>
+                <child>
+                  <object class="GtkCheckButton" id="slow_double_click_checkbutton">
+                    <property name="label" translatable="yes">Slowly double click to rename items</property>
+                    <property name="use_action_appearance">False</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="receives_default">False</property>
+                    <property name="use_underline">True</property>
+                    <property name="xalign">0</property>
+                    <property name="draw_indicator">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="position">4</property>
+                  </packing>
+                </child>
               </object>
               <packing>
                 <property name="position">1</property>
